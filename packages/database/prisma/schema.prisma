generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  url      = env("DATABASE_URL")
  provider = "postgres"
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum FileType {
  VIDEO
  FILE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  roles   Role[]   @default(value: [STUDENT])
  student Student?
  teacher Teacher?

  loginHistory Log[]
  loginRequest LoginRequest[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Log contains what is this person doing right now
model Log {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  timestamp DateTime @default(now())
  route     String
}

model Student {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  studentId String @unique
  firstname String
  lastname  String
  nickname  String

  telephoneNumber         String
  guardianTelephoneNumber String

  assignment  Assignment[]
  Score       Score[]
  Appointment Appointment[]

  createdAt DateTime @default(now())
}

model Teacher {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  firstname String
  lastname  String
  nickname  String?

  lessons Lesson[]
}

model File {
  id String @id @default(cuid()) @map("_id")

  name     String
  type     FileType
  location String

  lessons Lesson[]
}

model Lesson {
  id String @id @default(cuid())

  title       String
  description String?
  lastUpdated DateTime @default(now())

  materials  File[]
  assignment Assignment[]

  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String
}

model Assignment {
  id String @id @default(cuid())

  assignDate DateTime  @default(now())
  expireDate DateTime?

  isFinished Boolean @default(false)

  assignTo Student[]

  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String
}

model Config {
  key   String  @id @unique
  value String?
}

model Score {
  scoreboard   Scoreboard @relation(fields: [scoreboardId], references: [id])
  scoreboardId String

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  score Int

  @@id([scoreboardId, studentId])
}

model Scoreboard {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  name      String

  scores     Score[]
  totalScore Int
}

model LoginRequest {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  timestamp DateTime @default(now())
  approved  Boolean  @default(false)
}

model Appointment {
  id        Int     @id @default(autoincrement())
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  createdAt DateTime @default(now())

  appointmentTime DateTime
  endTime         DateTime
}
