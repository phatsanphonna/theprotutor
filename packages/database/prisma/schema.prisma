generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  url      = env("DATABASE_URL")
  provider = "postgres"
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum FileType {
  VIDEO
  FILE
}

enum LogActivity {
  SIGN_IN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  roles   Role[]   @default(value: [STUDENT])
  student Student?
  teacher Teacher?

  activities Log[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Log contains what is this person doing right now
model Log {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  timestamp DateTime    @default(now())
  address   String?
  activity  LogActivity
}

model Student {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  studentId String @unique
  firstname String
  lastname  String
  nickname  String

  telephoneNumber         String
  guardianTelephoneNumber String

  assignment  Assignment[]
  score       Score[]
  appointment Appointment[]

  createdAt DateTime @default(now())
}

model Teacher {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  firstname String
  lastname  String
  nickname  String?

  lessons Lesson[]
}

model Material {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  name String   @unique
  tags String[]

  lessons Lesson[]

  type FileType @default(FILE)

  file   File?   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String? @unique

  location String?
}

model File {
  id   String @id @default(cuid())
  data Bytes

  name        String
  ext         String
  contentType String

  Material Material?
}

model Lesson {
  id String @id @default(cuid())

  title       String
  description String?
  lastUpdated DateTime @default(now())

  materials   Material[]
  assignments Assignment[]

  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String
}

model Assignment {
  id String @id @default(cuid())

  assignDate DateTime  @default(now())
  expireDate DateTime?

  isFinished Boolean @default(false)

  assignTo   Student @relation(fields: [assignToId], references: [id])
  assignToId String

  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId String
}

model Score {
  scoreboard   Scoreboard @relation(fields: [scoreboardId], references: [id])
  scoreboardId Int

  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  score Int

  @@id([scoreboardId, studentId])
}

model Scoreboard {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  name      String

  scores Score[]

  total Float
  mean  Float
  min   Float
  max   Float
  sd    Float
}

model Appointment {
  id        Int     @id @default(autoincrement())
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  createdAt DateTime @default(now())

  appointmentTime DateTime
  endTime         DateTime
}
